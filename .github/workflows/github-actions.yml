name: Java CI/CD with Gradle and Docker

# event trigger
on:
  push:
    branches:
      - dev
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      ## jdk setting
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 환경별 yml 파일 생성
      - name: Make application.yml
        run: |
          if [ ! -d "src/main/resources" ]; then
            mkdir -p src/main/resources
          fi
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
        shell: bash

      # gradlew 실행 권한 부여
      - name: Grant execute permisson for gradlew
        run: chmod +x gradlew

      # Gradle 빌드
      - name: Build Gradle
        run: ./gradlew clean build

      # JAR 파일 확인
      - name: Verify JAR File
        run: |
          if [ ! -f ./build/libs/Docker-CICD-server-0.0.1-SNAPSHOT.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi          

      # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push
      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --no-cache -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
      # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행
      # 실행 시, docker-compose를 사용합니다.
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            # Docker Login
            sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
        
            # Stop and Remove Existing Containers
            sudo docker rm -f $(sudo docker ps -qa || true)
        
            # Pull Latest Docker Image
            sudo docker pull "${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest"
        
            # Start Containers with Docker Compose
            if [ -f /home/ubuntu/docker-compose.yml ]; then
              docker-compose up -d
            else
              echo "docker-compose.yml not found. Exiting."
              exit 1
            fi
        
            # Clean Up Unused Docker Images
            sudo docker image prune -f